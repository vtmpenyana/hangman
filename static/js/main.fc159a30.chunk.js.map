{"version":3,"sources":["TextBox.js","App.js","index.js"],"names":["TextBox","onSearchChange","id","onChange","className","type","placeholder","App","onSubmitClick","state","textValue","correctWord","document","querySelector","value","randomNumber","Math","floor","random","words","length","wordToShow","listOfWords","splice","console","log","indexOf","setState","incompleteWord","replace","currentScore","playerLives","alert","event","target","word","resetInput","fetch","then","response","json","firstWord","wordSize","randomLetterIndex","data-icon","viewBox","d","this","onClick","href","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"uMAgBeA,EAdC,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACd,OACI,6BACI,2BACAC,GAAG,aACHC,SAAUF,EACVG,UAAU,qCACVC,KAAK,OACLC,YAAY,qBC4FTC,E,kDAlGX,aAAc,IAAD,8BACT,gBAwBJC,cAAgB,WAEZ,GAAG,EAAKC,MAAMC,YAAc,EAAKD,MAAME,YAAY,CACnCC,SAASC,cAAc,eAC7BC,MAAQ,GACd,IAAIC,EAAeC,KAAKC,MAAMD,KAAKE,UAAY,EAAKT,MAAMU,MAAMC,OAAQ,IACpEC,EAAa,EAAKZ,MAAMU,MAAMJ,GAG9BO,EAAc,EAAKb,MAAMU,MAC1B,EAAKV,MAAME,cAAgB,EAAKF,MAAMU,MAAM,IAC3CG,EAAYC,OAAOD,EAAY,GAAI,GACnCE,QAAQC,IAAR,iCAAsCH,EAAY,GAAlD,yBAGAA,EAAYC,OAAOD,EAAYA,EAAYI,QAAQX,IAAgB,GACnES,QAAQC,IAAR,4BAAiCJ,KAMrC,EAAKM,SAAS,CAACR,MAAOG,EAAaX,YAAaU,EAC5CO,eAAgBP,EACfQ,QAAQR,EAAWL,KAAKC,MAAMD,KAAKE,UAAYG,EAAWD,OAAQ,KAAM,KAC7EU,aAAe,EAAKrB,MAAMqB,aAAe,IAEzCN,QAAQC,IAAR,sBAA2BJ,EAA3B,+BAA4D,EAAKZ,MAAMmB,qBAEvE,CACA,GAAG,EAAKnB,MAAMsB,YAAc,EACxB,EAAKJ,SAAS,CAACI,YAAa,EAAKtB,MAAMsB,YAAc,SAGrDC,MAAM,aACN,EAAKL,SAAS,CAACG,aAAc,EAAGC,YAAc,IAClCnB,SAASC,cAAc,eAC7BC,MAAQ,GAKtBU,QAAQC,IAAI,EAAKhB,MAAMU,QAnEd,EAsEblB,eAAiB,SAACgC,GACd,EAAKN,SAAS,CAACjB,UAAWuB,EAAMC,OAAOpB,SArEvC,EAAKL,MAAQ,CACTqB,aAAc,EACdC,YAAa,EACbI,KAAM,YACNzB,UAAW,GACXS,MAAO,GACPS,eAAgB,GAChBjB,YAAa,GACbyB,YAAY,GAVP,E,gEAcO,IAAD,OACfC,MAAM,yDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAnB,GACF,IAAMsB,EAAYtB,EAAM,GACpBuB,EAAWD,EAAUrB,OACrBuB,EAAoB3B,KAAKC,MAAMD,KAAKE,UAAYwB,EAAU,IAC9D,EAAKf,SAAS,CAACR,MAAOA,EAAOR,YAAa8B,EAAWb,eAAgBa,EAAUZ,QAAQY,EAAUE,GAAoB,Y,+BAuDzH,OACI,yBAAKvC,UAAU,MACX,wBAAIA,UAAU,qCAAd,YACA,yBAAKA,UAAU,8DACX,yBAAKA,UAAU,KAAKwC,YAAU,OAAOC,QAAQ,aACzC,4CACA,0BAAMC,EAAG,qHAEb,0BAAM1C,UAAU,mBAAhB,iBAA6C2C,KAAKtC,MAAMqB,eACxD,0BAAM1B,UAAU,mBAAhB,2BAAuD2C,KAAKtC,MAAMsB,eAEtE,wBAAI3B,UAAU,UAAU2C,KAAKtC,MAAMmB,gBAEnC,kBAAC,EAAD,CAAS3B,eAAgB8C,KAAK9C,iBAE9B,uBAAG+C,QAASD,KAAKvC,cAAeJ,UAAU,mEAAmE6C,KAAK,MAAlH,e,GA5FEC,a,MCGlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,U","file":"static/js/main.fc159a30.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TextBox = ({onSearchChange}) => {  \r\n    return(\r\n        <div>\r\n            <input \r\n            id='inputField'\r\n            onChange={onSearchChange}\r\n            className='input-reset ba b--black-20 pa2 mb2'\r\n            type='text' \r\n            placeholder='guess the word'\r\n             />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextBox;","import React, {Component} from 'react';\r\nimport TextBox from './TextBox';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currentScore: 0,\r\n            playerLives: 5,\r\n            word: 'something',\r\n            textValue: '',\r\n            words: [],\r\n            incompleteWord: '',\r\n            correctWord: '',\r\n            resetInput: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://random-word-api.herokuapp.com//word?number=10')\r\n        .then(response => response.json())\r\n        .then(words => {\r\n            const firstWord = words[0];\r\n            let wordSize = firstWord.length;\r\n            let randomLetterIndex = Math.floor(Math.random() * (wordSize -1 ));\r\n            this.setState({words: words, correctWord: firstWord, incompleteWord: firstWord.replace(firstWord[randomLetterIndex], '_')});\r\n        });\r\n    }\r\n\r\n    onSubmitClick = () => {\r\n        //check for correctness and clear input field if correct.\r\n        if(this.state.textValue === this.state.correctWord){\r\n            let input = document.querySelector('#inputField');\r\n            input.value = '';\r\n            let randomNumber = Math.floor(Math.random() * (this.state.words.length -1))\r\n            let wordToShow = this.state.words[randomNumber];\r\n\r\n            //removing word from list:        \r\n            let listOfWords = this.state.words;\r\n            if(this.state.correctWord === this.state.words[0]){\r\n                listOfWords.splice(listOfWords[0], 1);\r\n                console.log(`it was the first word: ${listOfWords[0]}, we've removed it`);\r\n            }\r\n            else{\r\n                listOfWords.splice(listOfWords[listOfWords.indexOf(randomNumber)], 1);\r\n                console.log(`it was this word: ${wordToShow}`);\r\n            }\r\n\r\n            \r\n\r\n            //updating the list:\r\n            this.setState({words: listOfWords ,correctWord: wordToShow, \r\n                incompleteWord: wordToShow\r\n                .replace(wordToShow[Math.floor(Math.random() * (wordToShow.length -1))], '_'),\r\n            currentScore : this.state.currentScore + 5});\r\n\r\n            console.log(`wordToShow: ${wordToShow} || incompleteWord: ${this.state.incompleteWord}`);\r\n        }\r\n        else{\r\n            if(this.state.playerLives > 1){\r\n                this.setState({playerLives: this.state.playerLives - 1});\r\n            }\r\n            else{\r\n                alert(\"Game Over\");\r\n                this.setState({currentScore: 0, playerLives : 5});\r\n                let input = document.querySelector('#inputField');\r\n                input.value = '';\r\n            }\r\n        }\r\n\r\n        //cheating answers \r\n        console.log(this.state.words);\r\n    }\r\n\r\n    onSearchChange = (event) => { \r\n        this.setState({textValue: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        // console.log(`this is the actual word: ${this.state.correctWord}`);\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='bg-black-90 lh-copy white tracked'>{`Hangman!`}</h1>\r\n                <div className=\"flex items-center justify-center pa4 bg-lightest-blue navy\">\r\n                    <svg className=\"w1\" data-icon=\"info\" viewBox=\"0 0 32 32\">\r\n                        <title>info icon</title>\r\n                        <path d={\"M16 0 A16 16 0 0 1 16 32 A16 16 0 0 1 16 0 M19 15 L13 15 L13 26 L19 26 z M16 6 A3 3 0 0 0 16 12 A3 3 0 0 0 16 6\"} />\r\n                    </svg>\r\n                    <span className=\"lh-title f4 ml3\">{`Score: ${this.state.currentScore}`}</span>\r\n                    <span className=\"lh-title f4 ml3\">{`Remaining Lives: ${this.state.playerLives}`}</span>\r\n                </div>\r\n                <h2 className='pa4 f2'>{this.state.incompleteWord}</h2>\r\n\r\n                <TextBox onSearchChange={this.onSearchChange}/>\r\n\r\n                <a onClick={this.onSubmitClick} className=\"f6 grow no-underline br-pill ba bw2 ph3 pv2 mb2 dib mt2 mid-gray\" href=\"#0\">Submit</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}